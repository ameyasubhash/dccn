1. hamming code

import java.util.*;

class hamming_code
{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        ArrayList<Integer> msg = new ArrayList<Integer>();

        System.out.println("ERROR DETECTION USING HAMMING CODE TECHNIQUE");

        //taking message as user input
        System.out.println("Enter the message");
        for (int i = 0; i < 7; i++) {
            int bit = sc.nextInt();
            msg.add(bit);
        }

        int arr[] = new int[3];

        //here the index is started from 0
        for (int i = 0; i < 7; i++) {
            
            //count the parity bit for p1
            //p1 -> 1 3 5 7
            if(msg.get(i) == 1 && ( (i == 0) || ( i == 2) || ( i == 4)|| ( i == 6) ))
            {
                arr[2] += 1; 
            }
            //counting the parity bit for p2
            //p2 -> 2 3 6 7
            
            else if(msg.get(i) == 1 && ( (i == 1) || ( i == 2) || ( i == 5)|| ( i == 6) ))
            {
                arr[1] += 1;
            }
            //counting the parity bit for p3 
            //p3 -> 4 5 6 7
            else if(msg.get(i) == 1 && ( (i == 3) || ( i == 4) || ( i == 5)|| ( i == 6) ))
            {
                arr[0] += 1;
            }           
        }

        //constructing parity bit array
        for (int i = 0; i < 3; i++) {
            
            if(arr[i] %  2 == 0)
            {
                arr[i] = 0;
            }
            else{
                arr[i] = 1;
            }
        }

        int n = arr.length;
        int error_bit = 0;
        for (int i = 0; i < arr.length; i++) {

            //error bit in binary
            System.out.print(arr[i]+"  ");

            if(arr[n - i - 1] == 1)
            {
                error_bit += Math.pow(2, i);
            }
        }

        //error bit in the message using hamming code 
        System.out.println("ERROR BIT IN THE MESSAGE IS -->  "+error_bit);

    }
}
///////////////////////////////
//////////////////////////////////

2.bit stuff

import java.util.*;
public class bit_stuff {
    public static void main (String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String msg=new String();
        String flag= new String();
        String coded=new String();
        String output=new String();
        int counter=0;
        System.out.println("Enter your Message");
        msg=sc.nextLine();
        System.out.println("Enter your flag");
        flag=sc.nextLine();
        System.out.println("Your Message is: "+ msg);
        System.out.println("Your Flag is: "+ flag);
        for(int i=0;i<msg.length();i++)
        {
            if (msg.charAt(i)!='1' && msg.charAt(i)!='0')
            {
                System.out.println("Enter valid Binary values");
                return;
            }
            if(msg.charAt(i)=='1')
            {
                counter++;
                coded= coded + msg.charAt(i);

            }
            else
            {
                coded= coded + msg.charAt(i);
                counter=0;
            }
            if(counter==5)
            {
                coded= coded + "0";
                counter=0;
            }
        }
        System.out.println("Your Encoded Message is: ");
        System.out.println(flag+ " "+ coded+ " "+ flag);

        counter = 0;
        for(int i=0;i<coded.length();i++)
        {
            if(coded.charAt(i)=='1')
            {
                counter++;
                output = output + coded.charAt(i);

            }
            else
            {
                output = output + coded.charAt(i);
                counter=0;
            }
            if(counter==5)
            {
                if((i+2)!=coded.length())
                {
                    output = output + coded.charAt(i+2);
                }
                else
                {
                    output = output + "1";
                }
                i=i+2;
                counter=1;
            }
        }
        System.out.print("Your De-Stuffed Message is: "+ output);
    }
}
////////////////////////
///////////////////////
3.stuffing

import java.util.Scanner;

public class Stuffing
{
    public static void main(String[] args)
    {
        Scanner sc= new Scanner(System.in);
        char flag = 'Z';
        String msg= new String();
        String encode= new String();
        String output=new String();
        System.out.println("Enter a message");
        msg = sc.nextLine();
        int n = msg.length();
        for(int i=0;i<n;i++)
        {
            char ch= msg.charAt(i);
            if(ch == flag || ch == '.')
                encode = encode + "."+ch;
            else
                encode = encode + ch;
        }

        System.out.println(encode);
        n = encode.length();
        for(int i=0;i<n;i++) {
            char ch = encode.charAt(i);
            if (ch == '.') {
                if ((i+1) <n && encode.charAt(i + 1)==flag)
                {
                    output = output + encode.charAt(i + 1);
                    i = i +1;
                }
                else if ((i+1) <n && encode.charAt(i + 1) == '.'){
                    output = output + encode.charAt(i + 1);
                    i = i + 1;
                }
            }
            else
            {
                output = output+ch;
            }
        }
        System.out.println(output);
    }
}
////////////////////
////////////////////
4. single parity check
import java.io.*;
import java.lang.*;
import java.util.*;
import java.net.*;
public class SingleParityServer {
public static void main(String args[])
{
	Socket          socket   = null; 
  ServerSocket    server   = null; 
   DataInputStream in       =  null; 
   int[] d=new int[50];
   int p=0,n=0;
   try
   { 
       server = new ServerSocket(5000); 
       System.out.println("Server started"); 

       System.out.println("Waiting for a client ..."); 

       socket = server.accept(); 
       System.out.println("Client accepted"); 

       in = new DataInputStream( 
           new BufferedInputStream(socket.getInputStream())); 

String line1="";
       while (!(line1= in.readUTF()).equals(Integer.toString(9))) 
       { 
           try
           { 

               d[p]=Integer.parseInt(line1);
               p++;
           } 
           catch(Exception ex) 
           { 
               System.out.println(ex); 
           } 
    
       } 
       System.out.println("Closing connection"); 

       socket.close(); 
       in.close(); 
   } 
   catch(IOException i) 
   { 
       System.out.println(i); 
   } 
   
   Scanner sc=new Scanner(System.in);
int k=9;
n=p-1;
int sum=0,i=0;
for(i=0;i<n;i++) {
	
		sum+=d[i];
		}
if(sum%2==d[n])
	k=0;
else
{
	k=1;
}

System.out.println("The Simple Parity is:\n");
for(i=0;i<=n;i++)
{
		System.out.print(d[i]+ " ");
	}
if(k==1)
	System.out.println("\nError Detected");
else
	System.out.println("\nNo Error Detected");

}		
}
////////////////
//////////////////
5.2d parity

import java.util.Scanner;

public class double_parity {

    static int[] getHorizontalParity(int[][] matrix) {

        int[] hPar = new int[matrix.length];

        for (int i = 0; i < hPar.length; i++) {
            int ones = 0;
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == 1) {
                    ones++;
                }
            }
            hPar[i] = ones % 2;
        }

        return hPar;
    }

    static int[] getVerticalParity(int[][] matrix) {
        int[] vPar = new int[matrix[0].length];

        for (int i = 0; i < matrix[0].length; i++) {
            int ones = 0;
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[j][i] == 1) {
                    ones++;
                }
            }
            vPar[i] = ones % 2;
        }

        return vPar;
    }

    static void printArray(int[] arr) {
        for (int val : arr) {
            System.out.print(val + " ");
        }
        System.out.println();
    }

    static int[][] inputMatrix(int r, int c, Scanner sc) {
        int[][] input = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                input[i][j] = sc.nextInt();
            }
        }
        return input;
    }

    static void correctError(int[][] recived, int[] sentHP, int[] sentVP, int[] recivedHP, int[] recivedVP) {
        for (int i = 0; i < sentHP.length; i++) {
            if (sentHP[i] != recivedHP[i]) {
                for (int j = 0; j < sentVP.length; j++) {
                    if (sentVP[j] != recivedVP[j]) {
                        System.out.println("Error at " + (i + 1) + " row " + (j + 1) + " column.");
                        recived[i][j] ^= 1;
                        return;
                    }
                }
            }
        }
        System.out.println("No Error");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size of data: ");

        int r = sc.nextInt(), c = sc.nextInt();
        int[][] matrix = new int[r][c];

        System.out.println("Enter data: ");
        matrix = inputMatrix(r, c, sc);

        int[] hPar = null, vPar = null;

        hPar = getHorizontalParity(matrix);
        System.out.println("Horizontal Parity: ");
        printArray(hPar);

        vPar = getVerticalParity(matrix);
        System.out.println("Vertical Parity: ");
        printArray(vPar);

        System.out.println("\nEnter recived data: ");
        int[][] recived = inputMatrix(r, c, sc);

        int[] recivedHP, recivedVP;
        recivedHP = getHorizontalParity(recived);
        System.out.println("Horizontal Parity: ");
        printArray(recivedHP);

        recivedVP = getVerticalParity(recived);
        System.out.println("Vertical Parity: ");
        printArray(recivedVP);

        correctError(recived, hPar, vPar, recivedHP, recivedVP);

        System.out.println("Corrected data: ");
        for (int[] arr : recived) {
            printArray(arr);
        }
    }
}
/////////////////
/////////////////////
6. crc method

import java.util.*;  
class CRCExample {  
    public static void main(String args[]) {   
        Scanner scan = new Scanner(System.in);  
        int size;  
        System.out.println("Enter the size of the data array: ");  
        size = scan.nextInt();  
        int data[] = new int[size];  
        System.out.println("Enter data bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            data[i] = scan.nextInt();  
        }   
        System.out.println("Enter the size of the divisor array:");  
        size = scan.nextInt();    
        int divisor[] = new int[size];  
        System.out.println("Enter divisor bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            divisor[i] = scan.nextInt();  
        }  
        int rem[] = divideDataWithDivisor(data, divisor);    
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println("\nGenerated CRC code is: ");  
          
        for(int i = 0; i < data.length; i++) {  
            System.out.print(data[i]);  
        }  
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println();   
        int sentData[] = new int[data.length + rem.length - 1];  
        System.out.println("Enter bits in the array which you want to send: ");  
        for(int i = 0; i < sentData.length; i++) {  
            System.out.println("Enter bit " +(sentData.length - 1)+ ":");  
            sentData[i] = scan.nextInt();  
        }  
        receiveData(sentData, divisor);  
    }  
    
    static int[] divideDataWithDivisor(int oldData[], int divisor[]) {  
        int rem[] = new int[divisor.length];  
        int i;  
        int data[] = new int[oldData.length + divisor.length];  

        System.arraycopy(oldData, 0, data, 0, oldData.length);  
        System.arraycopy(data, 0, rem, 0, divisor.length);  

        for(i = 0; i < oldData.length; i++) {  
            System.out.println((i+1) + ".) First data bit is : "+ rem[0]);  
            System.out.print("Remainder : ");  
            if(rem[0] == 1) {  

                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], divisor[j]);  
                    System.out.print(rem[j-1]);  
                }  
            }  
            else {  
  
                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], 0);  
                    System.out.print(rem[j-1]);  
                }  
            }  

            rem[divisor.length-1] = data[i+divisor.length];  
            System.out.println(rem[divisor.length-1]);  
        }  
        return rem;  
    }  

    static int exorOperation(int x, int y) {  

        if(x == y) {  
            return 0;  
        }  
        return 1;  
    }  

    static void receiveData(int data[], int divisor[]) {  
       
        int rem[] = divideDataWithDivisor(data, divisor);  

        for(int i = 0; i < rem.length; i++) {  
            if(rem[i] != 0) {  
 
                System.out.println("Currupted data received...");  
                return;  
            }  
        }  
        System.out.println("Data received without any error.");  
    }  
}  
/////////////////////
////////////////////////
7. internet checksum

import java.util.*;

class InternetChecksum {
	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the string input:");
		String input = scan.next();
		int checksum = generateChecksum(input);
		
		System.out.println("The checksum generated is = "
							+ Integer.toHexString(checksum));
		System.out.println("Enter the data to be sent:");
		input = scan.next();
		System.out.println("Enter the checksum to be sent:");
		checksum = Integer.parseInt((scan.next()), 16);
		
		receive(input, checksum);
	}
	
	static int generateChecksum(String s) {
		String hex_value = new String();
		
		int x, i, checksum=0;
		
		for(i=0 ; i < s.length()-2 ; i=i+2) {
			x = (int) (s.charAt(i));
			hex_value = Integer.toHexString(x);
			x = (int) (s.charAt(i+1));
			hex_value = hex_value + Integer.toHexString(x);
			
			System.out.println(s.charAt(i)+""+s.charAt(i+1) + " : "
								+ hex_value);
			x = Integer.parseInt(hex_value, 16);
			checksum += x;
		}
		if(s.length()%2 == 0) {
			x = (int) (s.charAt(i));
			hex_value = Integer.toHexString(x);
			x = (int) (s.charAt(i+1));
			hex_value = hex_value + Integer.toHexString(x);
			System.out.println(s.charAt(i)+""+s.charAt(i+1) + " : " + hex_value);
			x = Integer.parseInt(hex_value, 16);
		} else {
			x = (int) (s.charAt(i));
			hex_value = "00" + Integer.toHexString(x);
			x = Integer.parseInt(hex_value, 16);
			System.out.println(s.charAt(i) + " : " + hex_value);
		}
		checksum += x;
		hex_value = Integer.toHexString(checksum);
		
		if(hex_value.length() > 4) {
			int carry = Integer.parseInt((""+hex_value.charAt(0)), 16);
			hex_value = hex_value.substring(1,5);
			checksum = Integer.parseInt(hex_value, 16);
			checksum += carry;
		}
		checksum = generateComplement(checksum);
		return checksum;
	}
	
	static void receive(String s, int checksum) {
		int generated_checksum = generateChecksum(s);
		generated_checksum = generateComplement(generated_checksum);
		int syndrome = generated_checksum + checksum;
		syndrome = generateComplement(syndrome);

		System.out.println("Syndrome = " + Integer.toHexString(syndrome));
		if(syndrome == 0) {
			System.out.println("Data is received without error.");
		} else {
			System.out.println("There is an error in the received data.");
		}
	}
	
	static int generateComplement(int checksum) {
		checksum = Integer.parseInt("FFFF", 16) - checksum;
		return checksum;
	}
}